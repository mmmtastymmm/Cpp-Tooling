# Runs the unit tests
name: Building, Testing, and Static Analysis

# Controls when the workflow will run
on:
  # Triggers the workflow on push
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Test with the unit tests GCC
  unit-tests-debug:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Unit Tests GCC
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug 
          cmake --build build --target all -j $(nproc) 
          cd build && ctest --output-on-failure

    # Test with the unit tests GCC
  unit-tests-release:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Unit Tests GCC
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_BUILD_TYPE=Debug
          cmake --build build --target all -j $(nproc)
          cd build && ctest --output-on-failure


  # Test with the unit tests Clang
  unit-tests-clang-debug:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Unit Tests Clang
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build --target all -j $(nproc)
          cd build && ctest --output-on-failure

  unit-tests-clang-release:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Unit Tests Clang
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build --target all -j $(nproc)
          cd build && ctest --output-on-failure

  clang-tidy:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Unit Tests Clang
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          run-clang-tidy -j $(nproc) -p build -export-fixes clang-tidy-fixes.yml
          if [ -s clang-tidy-fixes.yml ]; then
            # The file is not-empty.
            echo "There are clang tidy errors to apply, use clang-apply-replacements to apply the changes"
            exit 1
          else
            echo "There were no issues"
          fi
      - uses: actions/upload-artifact@v3
        name: 'Upload Artifact'
        if: ${{ failure() }}
        with:
          name: clang-tidy-fixes
          path: clang-tidy-fixes.yml
          retention-days: 2

  # Test with the unit tests Clang
  format-code:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Format C++ and CMake
        run: |
          git config --global --add safe.directory /__w/Cpp-Tooling/Cpp-Tooling
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Debug
          cmake --build build --target check-format -j $(nproc)

  # Test with the unit tests Address Sanitizer
  address-sanitizer:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=AddressSanitizer
          cmake --build build --target all -j $(nproc)
          grep -q "sanitize=address" build/compile_commands.json
          cd build && ctest --output-on-failure

  hardened:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Hardened -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build --target all -j $(nproc) 
          grep -q "stack-protector" build/compile_commands.json
          cd build && ctest --output-on-failure

  leak-sanitizer:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=LeakSanitizer
          cmake --build build --target all -j $(nproc)
          grep -q "sanitize=leak" build/compile_commands.json
          cd build && ctest --output-on-failure

  thread-sanitizer:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=ThreadSanitizer
          cmake --build build --target all  -j $(nproc)
          grep -q "sanitize=thread" build/compile_commands.json
          cd build && ctest --output-on-failure

  undefined-behavior-sanitizer:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=UndefinedBehaviorSanitizer
          cmake --build build --target all -j $(nproc) 
          grep -q "sanitize=undefined" build/compile_commands.json
          cd build && ctest --output-on-failure

  memory-sanitizer:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_BUILD_TYPE=MemorySanitizer
          cmake --build build --target all -j $(nproc)
          grep -q "sanitize=memory" build/compile_commands.json
          cd build && ctest --output-on-failure

  no-build-specified:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Tries to run cmake with no build type, which should fail and thus the OR bash route taken and exit with zero
      - name: Test
        run: |
          cmake -S . -B build -G Ninja && exit 1 || exit 0

  incorrect-build-specified:
    # The type of runner that the job will run on (has to be ubuntu for docker)
    runs-on: ubuntu-latest
    # The image tag to use for the container
    container: mmmtastymmm/cpp-tooling-build-enviornment
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Tries to run cmake with a bad build type, which should fail and thus the OR bash route taken and exit with zero
      - name: Test
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=BadBuildString && exit 1 || exit 0